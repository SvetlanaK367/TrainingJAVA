package test.com.sviatlana.digit.validation;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import com.sviatlana.digit.main.CustomException;
import com.sviatlana.digit.validation.MultiplicationValidation;

@RunWith(Parameterized.class)
public class MultiplicationValidationTestException {

	private int inputValue;
	private boolean expectedValue;
	private Class<? extends Exception> expectedException;
	private String expectedExceptionMsg;
	private int inputDigit;

	@Rule 
	ExpectedException thrown = ExpectedException.none();
	
	public MultiplicationValidationTestException (int input, int dg, boolean expected, Class<? extends Exception> expectedExc, String expectedMsg) {
		inputValue = input;
		inputDigit = dg;
		expectedValue = expected;
		expectedException = expectedExc;
		expectedExceptionMsg = expectedMsg;
	}
	
	@Parameterized.Parameters
	public static Collection<Object[]> inputData() {
		
		return Arrays.asList (
			new Object[][] {
					{22222, 5, true, null, null},
					{1111, 4, true, null, null}
					//{0, 1, false, CustomException.class, "Zero is not sutable. Please run with a correct value."},
					//{12345, 4, false, CustomException.class, "The number of digits should be " + 4 + ". Please run with a correct value."}
			}
		);
	}
	
	@Test
	public void numberValidationTest() throws CustomException {
		System.out.println(expectedException);
		
		if (expectedException != null) {
			thrown.expect(expectedException);
			thrown.expectMessage(expectedExceptionMsg);
		}
		
		assertEquals(expectedValue, MultiplicationValidation.multiplDigitsCheck(inputValue, inputDigit));
	}
}
